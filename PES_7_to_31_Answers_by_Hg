{
 "cells": [
  {
   "cell_type": "raw",
   "id": "0e61e91c",
   "metadata": {},
   "source": [
    "Question 7: \n",
    "Write a function called countUp that accepts two integer parameters.\n",
    "a)The function will print out all integers between the two parameters (excluding both parameters!), from lower parameter to higher parameter in ascending order.\n",
    "b)Write using While loop\n",
    "c)Write using For Loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45ae9b3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def whileCountUp(a, b):\n",
    "    while(a+1 < b):\n",
    "        a = a + 1\n",
    "        print(a)\n",
    "        \n",
    "def forCountUp(a, b):\n",
    "    for i in range(a+1, b):\n",
    "        print(i)\n",
    "\n",
    "whileCountUp(10,20)\n",
    "print('---------- WHILE LOOP ENDS HERE ----------------')\n",
    "forCountUp(10, 20)\n",
    "print('----------- FOR LOOP ENDS HERE ---------------')"
   ]
  },
  {
   "cell_type": "raw",
   "id": "ad31264c",
   "metadata": {},
   "source": [
    "Question 8:\n",
    "Represent a 2x3 matrix using List. Write a program to find the biggest number and its index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5038b88c",
   "metadata": {},
   "outputs": [],
   "source": [
    "li = [[1, 2, 3], [1100, 900, 6]]\n",
    "li"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83d3dcff",
   "metadata": {},
   "outputs": [],
   "source": [
    "big = 0\n",
    "for i in li:\n",
    "    secin = 0\n",
    "    for x in i:\n",
    "        if x > big:\n",
    "            secin = secin + 1\n",
    "            big = x\n",
    "            index = li.index(i)\n",
    "print(big, 'Index: ', '[', index, secin -1 , ']')"
   ]
  },
  {
   "cell_type": "raw",
   "id": "5804e9aa",
   "metadata": {},
   "source": [
    "9. Write a program to Accept a String from the User using relevant keyboard input method, and count the number of lower case letters in that string, and print the count.\n",
    "a)Test the program for three different input strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94d12e05",
   "metadata": {},
   "outputs": [],
   "source": [
    "string = input('Enter a string: ')\n",
    "\n",
    "lowerCount = 0\n",
    "total = 0\n",
    "for i in string:\n",
    "    total = total + 1\n",
    "#    if i >= 'a' and i <= 'z':  # non-pythonic code.\n",
    "    if i.islower():             # pythonic code.\n",
    "        lowerCount = lowerCount + 1\n",
    "print('total Count: ', total, 'Total Lower Char: ' ,lowerCount)\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "400735e9",
   "metadata": {},
   "source": [
    "Question: 10\n",
    "Given a String as parameter, write a function to reverse the string and return the reversed string. Print the return value\n",
    "a)Test the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91b8354c",
   "metadata": {},
   "outputs": [],
   "source": [
    "string = input('Enter a sting: ')\n",
    "string = string[::-1]  #Slicing method to reverse the string!!!\n",
    "print(string) #                                    \n",
    "    "
   ]
  },
  {
   "cell_type": "raw",
   "id": "a560b88c",
   "metadata": {},
   "source": [
    "Question: 11\n",
    "Write a function to Print Multiplication Tables of 1 to 10.\n",
    "a)1x1 to 10x10 using relevant loop keywords.\n",
    "b)Test the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18470546",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(1, 11):\n",
    "    print('\\t')\n",
    "    for j in range(1, 11):\n",
    "        print(i, '*', j, '= ', i*j)\n",
    "        "
   ]
  },
  {
   "cell_type": "raw",
   "id": "d20f2215",
   "metadata": {},
   "source": [
    "Question: 12 \n",
    "Write a Program to create a List which has Squares of Numbers from n1 to n2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "959aa0dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "sq_list = []\n",
    "for i in li:\n",
    "    sq_list.append(i**2)\n",
    "print('Original list: ', li)\n",
    "print('Squared List: ', sq_list)\n",
    "\n",
    "# Do it with list comprehension function:\n",
    "li = range(1, 11)\n",
    "sqrdList = [  i**2  for i in li ]\n",
    "sqrdList\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "9088f4bb",
   "metadata": {},
   "source": [
    "Question: 13\n",
    "Write a function to print odd numbers from num1 to num2 and return count."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "909ec180",
   "metadata": {},
   "outputs": [],
   "source": [
    "def oddCountPrint(li):\n",
    "    oddList = [ i for i in li if i % 2 != 0 ]\n",
    "    return oddList\n",
    "\n",
    "li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "oddnewList = oddCountPrint(li)\n",
    "print('Original List: ', li)\n",
    "print('List of odd numbers: ', oddnewList)\n",
    "print('Total Odd Count: ', len(oddnewList))"
   ]
  },
  {
   "cell_type": "raw",
   "id": "e5ddf9b5",
   "metadata": {},
   "source": [
    "Question: 14\n",
    "Write a function to print Even numbers from num1 to num2 and return count."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15f7fa6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def evenCountPrint(li):\n",
    "    oddList = [ i for i in li if i % 2 == 0 ]\n",
    "    return oddList\n",
    "\n",
    "li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n",
    "evenList = evenCountPrint(li)\n",
    "print('Original List: ', li)\n",
    "print('List of even numbers: ', evenList)\n",
    "print('Total Even Count: ', len(evenList))"
   ]
  },
  {
   "cell_type": "raw",
   "id": "523f2654",
   "metadata": {},
   "source": [
    "Question: 15\n",
    "Write a function to check if a given number is a prime number or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5162c3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def isPrime(num):\n",
    "    count = 0\n",
    "    for i in range(1, num):\n",
    "        if num % i == 0:\n",
    "            count = count + 1\n",
    "    return count\n",
    "\n",
    "for i in range(1, 11):\n",
    "    if isPrime(i) != 1:\n",
    "        print(i, '[Not a prime number]')\n",
    "    else:\n",
    "        print(i, '[Prime number]')\n",
    "\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "cee1bba1",
   "metadata": {},
   "source": [
    "Question: 16\n",
    "Write a function to print Prime numbers from num1 to num2 and return count."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bfcb8b83",
   "metadata": {},
   "outputs": [],
   "source": [
    "def isPrime(num):\n",
    "    count = 0\n",
    "    for i in range(1, num):\n",
    "        if num % i == 0:\n",
    "            count = count + 1\n",
    "    return count\n",
    "primeCount = 0\n",
    "for i in range(1, 100):\n",
    "    if isPrime(i) == 1:\n",
    "        primeCount = primeCount + 1\n",
    "print(primeCount)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "83a40013",
   "metadata": {},
   "source": [
    "Question: 17\n",
    "From a list containing int’s, string’s and float’s, make three lists to store them separately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "549d7f2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "misList = [1, 2, 3, 'Hello', 'World', 0.5, 12, 4.2, 9.2, 'Keyboard']\n",
    "\n",
    "def clearList():\n",
    "    intList.clear()\n",
    "    floatList.clear()\n",
    "    strList.clear()\n",
    "    mixList.clear()\n",
    "\n",
    "def filterList(li):\n",
    "    for i in misList:\n",
    "        if isinstance(i, int):\n",
    "            intList.append(i)\n",
    "        elif isinstance(i, float):\n",
    "            floatList.append(i)\n",
    "        elif isinstance(i, str):\n",
    "            strList.append(i)\n",
    "        else:\n",
    "            mixList.append(i)\n",
    "\n",
    "clearList()\n",
    "filterList(misList)\n",
    "print('Integer List: ', intList)\n",
    "print('Float List: ', floatList)\n",
    "print('String List: ', strList)\n",
    "print('MixList: ', mixList)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "c7fae974",
   "metadata": {},
   "source": [
    "Question 18:\n",
    "Write a Python program that prints all the numbers from 0 to 100 except multiple of 3 and 5.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "054b8d07",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(0, 101):\n",
    "    if i % 3 != 0 and i % 5 != 0:\n",
    "        print(i)\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "raw",
   "id": "43d3c32c",
   "metadata": {},
   "source": [
    "Question 19:\n",
    "Write a Python program to get the Fibonacci series between 0 to 50."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "889e14b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 0\n",
    "b = 1\n",
    "fibboList = [0, 1]\n",
    "for i in range(1,11): # for 50 change 11 to 50\n",
    "    x = a + b\n",
    "    fibboList.append(x)\n",
    "    a = b; b = x \n",
    "\n",
    "fibboList"
   ]
  },
  {
   "cell_type": "raw",
   "id": "bdbb608c",
   "metadata": {},
   "source": [
    "Question: 20\n",
    "Write a python program to count the number of vowels in a user input string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ad06718",
   "metadata": {},
   "outputs": [],
   "source": [
    "string = input('Enter a string: ')\n",
    "vowels = ['a', 'e', 'i', 'o', 'u']\n",
    "\n",
    "count = 0\n",
    "for i in string:\n",
    "#    if i.lower() == 'a' or i.lower() == 'e' or i.lower() == 'i' or i.lower() == 'o' or i.lower() == 'u': # Less-pythonic code.\n",
    "    for j in vowels:\n",
    "        if i.lower() == j.lower():\n",
    "            count = count + 1\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "34c5ee76",
   "metadata": {},
   "source": [
    "Question: 21\n",
    "Create a program that will keep track of items for a shopping list.\n",
    "a)The program should keep asking for new items until “endshopping” is entered.\n",
    "b)The program should then display the full shopping list.\n",
    "c)Test the above program for 5,8 and 10 items. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2bef626",
   "metadata": {},
   "outputs": [],
   "source": [
    "shoppingList = []\n",
    "shoppingList.clear()\n",
    "\n",
    "while(1):\n",
    "    item = input('Enter item to add in shopping list: ')\n",
    "    if item != 'end':\n",
    "        shoppingList.append(item)\n",
    "    else:\n",
    "        break\n",
    "if len(shoppingList) == 0:\n",
    "    print('Shopping list is empty')\n",
    "else:\n",
    "    print('Shopping List: ', shoppingList)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "818b04b9",
   "metadata": {},
   "source": [
    "Question 22:\n",
    "Create a function that will ask the user for a number and then print out a list of numbers from 1 to the number entered and the square of the number.\n",
    "a)For example, if the user entered '3' then the program would output:\n",
    "b)1 squared is 1.\n",
    "c)2 squared is 4.\n",
    "d)3 squared is 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ce56630",
   "metadata": {},
   "outputs": [],
   "source": [
    "num1 = int(input('Enter first number: '))   # str is taken as input and converted to int.\n",
    "num2 = int(input('Enter Second number: '))  # str is taken as input and converted to int.\n",
    "li = range(num1, num2+1)\n",
    "squaredList = lambda num: num*num\n",
    "\n",
    "for i in li:\n",
    "    print(squaredList(i))\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "raw",
   "id": "af8354ea",
   "metadata": {},
   "source": [
    "Question 23:\n",
    "Define a function called fnStringMirror:\n",
    "a)This function will get an input string as a parameter and returns its mirror image.\n",
    "b)For e.g if input string is “blue”, the mirror image is “blueeulb”"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6748626",
   "metadata": {},
   "outputs": [],
   "source": [
    "str = input(\"Enter a string: \")\n",
    "mirrorStr = str[:] + str[::-1]\n",
    "mirrorStr"
   ]
  },
  {
   "cell_type": "raw",
   "id": "6c5c7c66",
   "metadata": {},
   "source": [
    "Question 24:\n",
    "    Write a program that accepts a sentence and calculate the number of letters and digits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9420f13d",
   "metadata": {},
   "outputs": [],
   "source": [
    "str = input('Enter a sentence: ')\n",
    "mis = 0; alpha = 0; digit = 0\n",
    "for i in str:\n",
    "    if i.isalpha():   # isalpha is for letters. \n",
    "        alpha = alpha + 1\n",
    "    elif i.isdigit(): # isdigit is for digits.\n",
    "        digit = digit + 1\n",
    "    else:\n",
    "        mis = mis + 1\n",
    "\n",
    "print('Normal function: Total Letters: ', alpha)\n",
    "print('normal function: Total Digits: ', digit)\n",
    "\n",
    "# List Comprehension function format!!!\n",
    "lettersSum = sum([1 for i in str if i.isalpha()])\n",
    "print('List comprehension function: Total Letters: ', lettersSum)\n",
    "\n",
    "digitSum = sum([1 for i in str if i.isdigit()])\n",
    "print('List comprehension function: Total Digits: ', digitSum)\n",
    "\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "a4cb5d47",
   "metadata": {},
   "source": [
    "Question 25:\n",
    "Write a program to compute the frequency of the words from the input sentence. Display the frequency of each word from the sentence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10fad8ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "str = input('Enter a string with duplicate words in it: ')\n",
    "li = str.split()\n",
    "li\n",
    "freq = [li.count(p) for p in li] # this will hold duplicate entries but later this can be resolved.\n",
    "freq\n",
    "print(dict(zip(li, freq))) # Dict doesn't hold the duplicate entries."
   ]
  },
  {
   "cell_type": "raw",
   "id": "313eaad6",
   "metadata": {},
   "source": [
    "Question 26:\n",
    "Write a function which will:\n",
    "    a)Create a list of 10 random integers.\n",
    "    b)Then find the largest of the list of numbers, using a loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9278bc36",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "randomlist = []\n",
    "for i in range(0,10):\n",
    "    n = random.randint(-10000,10000)\n",
    "    randomlist.append(n)\n",
    "\n",
    "max = randomlist[0]       # Hold the first element of the array for further comparision.\n",
    "for i in randomlist:\n",
    "    if i > max:\n",
    "        max = i\n",
    "print(randomlist)\n",
    "print('Largest number in the list: ', max)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3720f4c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "randomlist = []\n",
    "for i in range(0,10):\n",
    "    n = random.randint(-10000,10000)\n",
    "    randomlist.append(n)\n",
    "print(randomlist)\n",
    "print('Largest number in the list: ', )"
   ]
  },
  {
   "cell_type": "raw",
   "id": "ffb4ec9e",
   "metadata": {},
   "source": [
    "Question 27:\n",
    "A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward. E.g “MALAYALAM”.\n",
    "a)Write a program to accept a string as input.\n",
    "b)Check if the String is a Palindrome and print relevant messages.\n",
    "c)The Program is in loop, and will end if user input string is “end”"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce16dff9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def palindrome(str):\n",
    "    length = 0\n",
    "    if len(str) % 2 == 0:\n",
    "        print('Not a Palindrome String')\n",
    "    else:\n",
    "        \"\"\"\"\"\n",
    "        Let of pythonic code. This takes lot of execution cycle. Hence needs an improvement!!!\n",
    "        # length = int(len(str)/2)\n",
    "        # front = str[:length+1]\n",
    "        # end = str[:length-1:-1]\n",
    "        # if str[:length+1] == str[:length-1:-1]:\n",
    "        \"\"\"\"\"\n",
    "        if str[:] == str[::-1]:\n",
    "            print('Sting is palindrome: ', str)\n",
    "        else:\n",
    "            print('String is not palindrome: ', str)\n",
    "        \n",
    "str = input('Enter a string: ')\n",
    "palindrome(str)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "9d31e273",
   "metadata": {},
   "source": [
    "Question: 28\n",
    "Extract Title from below strings\n",
    "a)Dev, Mr Kapil. 60, Delhi\n",
    "b)Roy, Mrs Saina. 30,Kolkata\n",
    "c)Wodeyar, His-Excellency Yaduveer. 30, Mysore\n",
    "d)Anand, Dr Ramanath. 45, Chennai"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3f3f558",
   "metadata": {},
   "outputs": [],
   "source": [
    "str = input('Enter a string: ')\n",
    "new = str.split(' ')\n",
    "print('Title in the string is: ', new[1])"
   ]
  },
  {
   "cell_type": "raw",
   "id": "b1cc3c32",
   "metadata": {},
   "source": [
    "Question: 29\n",
    "Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\n",
    "Suppose the following input is supplied to the program:\n",
    "“hello world and practice makes perfect and hello world again”\n",
    "Then, the output should be: “again and hello makes perfect practice world”"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d67cac8",
   "metadata": {},
   "outputs": [],
   "source": [
    "str = input('Enter a string: ')\n",
    "newStr = str.split(\" \")\n",
    "final = []\n",
    "\n",
    "for i in newStr:\n",
    "    if i not in final:\n",
    "        final.append(i)\n",
    "final"
   ]
  },
  {
   "cell_type": "raw",
   "id": "a816ea26",
   "metadata": {},
   "source": [
    "Question: 30\n",
    "Game Rock, Paper Scissors is as described in the diagram.\n",
    "2 players play the game.\n",
    "Accept their names as input.\n",
    "The game is in a loop for Num1 number of times.\n",
    "Num1 is accepted by the user\n",
    "The Player’s choice is within below range.\n",
    "a)0 for Rock\n",
    "b)1 for Paper\n",
    "c)2 for Scissor\n",
    "The Results are:\n",
    "a)Tie or one player would win.\n",
    "b)Display the player’s name and choice\n",
    "c)Display winners name.\n",
    "Write Truth Table and Program for the game."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8acbdbc7",
   "metadata": {},
   "outputs": [],
   "source": [
    "player1 = input('Enter name of Player  I: ')\n",
    "player2 = input('Enter name of Player II: ')\n",
    "loopGame = int(input('How many times do you want to play this game: '))\n",
    "\n",
    "GameDict = {0 : \"Rock\", 1 : \"Paper\", 2 : \"Scissor\"}\n",
    "\n",
    "while(loopGame):\n",
    "    player_I_Choice = int(input('Select choice for Player I: [0 - Rock] [1 - Paper] [2 - Scissor]: '))\n",
    "    if player_I_Choice > 2 or player_I_Choice < 0:\n",
    "        print('Wrong Option Chosen By Player I, Restart the Game!!!')\n",
    "        break;\n",
    "    player_II_Choice = int(input('Select choice for Player II: [0 - Rock] [1 - Paper] [2 - Scissor]: '))\n",
    "    if player_II_Choice > 2 or player_II_Choice < 0:\n",
    "        print('Wrong Option Chosen By Player II, Restart the Game!!!')\n",
    "        break;\n",
    "    if player_I_Choice == player_II_Choice:\n",
    "        print('Game Tie!!!')\n",
    "    \n",
    "    if (player_I_Choice == 0 and player_II_Choice == 2) or (player_I_Choice == 1 and player_II_Choice == 0) or (player_I_Choice == 2 and player_II_Choice == 1):\n",
    "        print('Player 1 is Winner: \\n', 'Player I: ', GameDict[player_I_Choice], ' : ', 'Player II: ' , GameDict[player_II_Choice])\n",
    "\n",
    "    if (player_I_Choice == 0 and player_II_Choice == 1) or (player_I_Choice == 1 and player_II_Choice == 2) or (player_I_Choice == 2 and player_II_Choice == 0):\n",
    "        print('Player II is Winner: \\n', 'Player I: ', GameDict[player_I_Choice], ' : ', 'Player II: ' , GameDict[player_II_Choice])\n",
    "\n",
    "    loopGame = loopGame - 1\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "caf7e756",
   "metadata": {},
   "source": [
    "Question 31:\n",
    "Banking Functions\n",
    "a)acnum = Create_account(acname, idnum)\n",
    "b)balance=doCredit(acnum,amount)\n",
    "c)balance=doDebit(acnum,amount)\n",
    "d)balance=getBalance(acnum)\n",
    "e)details=getAccountDetails(acnum)\n",
    "Write Python Programs for above requirements.\n",
    "Think through the process for above requirements and make your own programming assumptions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "001f299d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 - Create Account] \n",
      "[1 - Do Credit] \n",
      "[2 - Do Debit] \n",
      "[3 - Get Balance] \n",
      "[4 - Get Account Details]\n",
      "Enter your choice: 0\n",
      "Enter the account number: 987654321\n",
      "Current or Savings?Saving\n",
      "Account Successfully Created!!!\n",
      "[0 - Create Account] \n",
      "[1 - Do Credit] \n",
      "[2 - Do Debit] \n",
      "[3 - Get Balance] \n",
      "[4 - Get Account Details]\n",
      "Enter your choice: 1\n",
      "Enter the amount to be credited to account: 1000000\n",
      "Updated Balance Amount after Credited Amount:  1000000\n",
      "[0 - Create Account] \n",
      "[1 - Do Credit] \n",
      "[2 - Do Debit] \n",
      "[3 - Get Balance] \n",
      "[4 - Get Account Details]\n",
      "Enter your choice: 2\n",
      "Enter the amount to be debited from account: 83927\n",
      "Updated Balance Amount after Debited Amount:  916073\n",
      "[0 - Create Account] \n",
      "[1 - Do Credit] \n",
      "[2 - Do Debit] \n",
      "[3 - Get Balance] \n",
      "[4 - Get Account Details]\n",
      "Enter your choice: 3\n",
      "Balance for Acc:  987654321 is  916073\n",
      "[0 - Create Account] \n",
      "[1 - Do Credit] \n",
      "[2 - Do Debit] \n",
      "[3 - Get Balance] \n",
      "[4 - Get Account Details]\n",
      "Enter your choice: 4\n",
      "Account number:  987654321\n",
      "Account Id:  88675\n",
      "Account Balance:  916073\n",
      "Account Type:  Saving\n",
      "[0 - Create Account] \n",
      "[1 - Do Credit] \n",
      "[2 - Do Debit] \n",
      "[3 - Get Balance] \n",
      "[4 - Get Account Details]\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "accDict = {\"accNum\" : 0, \"accId\" : 0, \"accBal\" : 0, \"accType\" : ''}\n",
    "\n",
    "def createAccount(accDict):\n",
    "    accDict[\"accNum\"] = int(input('Enter the account number: '))\n",
    "    accDict[\"accId\"] = random.randint(87342, 90000)\n",
    "    accDict[\"accBal\"] = 0\n",
    "    accDict[\"accType\"] = input('Current or Savings?')\n",
    "\n",
    "def showAccountDetail(accDict):\n",
    "    print('Account number: ', accDict[\"accNum\"])\n",
    "    print('Account Id: ', accDict[\"accId\"])\n",
    "    print('Account Balance: ', accDict[\"accBal\"])\n",
    "    print('Account Type: ', accDict[\"accType\"])\n",
    "    \n",
    "def creditAccount(accDict, amount):\n",
    "    accDict[\"accBal\"] =  accDict[\"accBal\"] + amount\n",
    "    print('Updated Balance Amount after Credited Amount: ', accDict[\"accBal\"])\n",
    "    \n",
    "def debitAccount(accDict, amount):\n",
    "    accDict[\"accBal\"] = accDict[\"accBal\"] - amount\n",
    "    print('Updated Balance Amount after Debited Amount: ', accDict[\"accBal\"])\n",
    "\n",
    "def accBalance(accDict):\n",
    "    print('Balance for Acc: ', accDict[\"accNum\"], 'is ', accDict[\"accBal\"])\n",
    "    \n",
    "\n",
    "amount = 0\n",
    "while(1):    \n",
    "    print('[0 - Create Account] \\n[1 - Do Credit] \\n[2 - Do Debit] \\n[3 - Get Balance] \\n[4 - Get Account Details]')\n",
    "    num = int(input('Enter your choice: '))\n",
    "\n",
    "    if num == 0:\n",
    "        # Create an account!!!\n",
    "        createAccount(accDict)\n",
    "        print('Account Successfully Created!!!')\n",
    "    elif num == 1:\n",
    "        # Account has been credited!!!\n",
    "        amount = int(input('Enter the amount to be credited to account: '))\n",
    "        creditAccount(accDict, amount)\n",
    "    elif num == 2:\n",
    "        # Account has bee debited!!!\n",
    "        amount = int(input('Enter the amount to be debited from account: '))\n",
    "        debitAccount(accDict, amount)\n",
    "    elif num == 3:\n",
    "        accBalance(accDict)\n",
    "    elif num == 4:\n",
    "        showAccountDetail(accDict)\n",
    "    else:\n",
    "        print(\"Invalid option selected. Please select [0 - 4]\")\n",
    "        break\n",
    "    \n",
    "    \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
